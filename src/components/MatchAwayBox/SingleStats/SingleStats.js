"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const SingleStats_module_css_1 = __importDefault(require("./SingleStats.module.css"));
const TittleTemplateBox_1 = __importDefault(require("../../MatchHomeBox/TittleTemplateBox/TittleTemplateBox"));
const OverallButton_1 = __importDefault(require("../../MatchHomeBox/OverallButton/OverallButton"));
const StatsLine_1 = __importDefault(require("../StatsLine/StatsLine"));
const SingleStats = (props) => {
    const [state, setState] = (0, react_1.useState)({
        all: false,
        single: true
    });
    const setAll = () => {
        setState(prevState => {
            return Object.assign(Object.assign({}, prevState), { all: true, single: false });
        });
    };
    const setSingle = () => {
        setState(prevState => {
            return Object.assign(Object.assign({}, prevState), { all: false, single: true });
        });
    };
    const awayOBJAway = props.awayOBJAway;
    const awayOBJAll = props.awayOBJAll;
    const awayOBJAway_list = props.awayOBJAway_list;
    const awayOBJAll_list = props.awayOBJAll_list;
    let contentOverall;
    let contentWinOver;
    let contentBTTS;
    let contentHT;
    let contentOU;
    let contentOUHTFT;
    let contentHTFT;
    let gamesCountVar;
    if (state.single) {
        gamesCountVar = awayOBJAway.gamesCount;
        contentOverall = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.gspm / awayOBJAway.gamesCount).toFixed(2), txt: "Goals scored per game", gameList: [], setList: false, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.gcpm / awayOBJAway.gamesCount).toFixed(2), txt: "Goals conceded per game", gameList: [], setList: false, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.win / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Win", gameList: awayOBJAway_list.win, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.draw / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Draw", gameList: awayOBJAway_list.draw, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.lose / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Lose", gameList: awayOBJAway_list.lose, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.cleanS / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Clean sheets", gameList: awayOBJAway_list.cleanS, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.soem / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Team scored over 0.5 goals", gameList: awayOBJAway_list.soem, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.stgoem / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Team scored over 1.5 goals", gameList: awayOBJAway_list.stgoem, setList: true, teamName: props.teamName, homeAll: "H" })] });
        contentWinOver = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.win2 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Win and over 1.5 goals", gameList: awayOBJAway_list.win2, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.draw2 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Draw and over 1.5 goals", gameList: awayOBJAway_list.draw2, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.lose2 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Lose and over 1.5 goals", gameList: awayOBJAway_list.lose2, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.win3 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Win and over 2.5 goals", gameList: awayOBJAway_list.win3, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.draw3 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Draw and over 2.5 goals", gameList: awayOBJAway_list.draw3, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.lose3 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Lose and over 2.5 goals", gameList: awayOBJAway_list.lose3, setList: true, teamName: props.teamName, homeAll: "H" })] });
        contentBTTS = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.bts / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Both teams to score (BTTS)", gameList: awayOBJAway_list.bts, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.btsFH / awayOBJAway.gamesCount * 100).toFixed(0), txt: "BTTS in the first half", gameList: awayOBJAway_list.btsFH, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.BTTS_SH / awayOBJAway.gamesCount * 100).toFixed(0), txt: "BTTS in the second half", gameList: awayOBJAway_list.BTTS_SH, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.btts3 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "BTTS and over 2.5 goals", gameList: awayOBJAway_list.btts3, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.win_BTTS / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Team won and BTTS", gameList: awayOBJAway_list.win_BTTS, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.draw_BTTS / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Draw and BTTS", gameList: awayOBJAway_list.draw_BTTS, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.lose_BTTS / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Team lost and BTTS", gameList: awayOBJAway_list.lose_BTTS, setList: true, teamName: props.teamName, homeAll: "H" })] });
        contentHT = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.leadHT / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Team won first half", gameList: awayOBJAway_list.leadHT, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.loseHT / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Team lost first half", gameList: awayOBJAway_list.loseHT, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.drawHT / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Draw at half-time", gameList: awayOBJAway_list.drawHT, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.sinFH / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Team Scored over 0.5 in FH", gameList: awayOBJAway_list.sinFH, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.sinSH / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Team Scored over 0.5 in SH", gameList: awayOBJAway_list.sinSH, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.sibh / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Team Scored in both halves", gameList: awayOBJAway_list.sibh, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.gibh / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Goal in both halves", gameList: awayOBJAway_list.gibh, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.more_FH / awayOBJAway.gamesCount * 100).toFixed(0), txt: "More goals in the first half", gameList: awayOBJAway_list.more_FH, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.more_SH / awayOBJAway.gamesCount * 100).toFixed(0), txt: "More goals in the second half", gameList: awayOBJAway_list.more_SH, setList: true, teamName: props.teamName, homeAll: "H" })] });
        contentOU = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_1_5 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 1.5 goals", gameList: awayOBJAway_list.over_1_5, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_2_5 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 2.5 goals", gameList: awayOBJAway_list.over_2_5, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_3_5 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 3.5 goals", gameList: awayOBJAway_list.over_3_5, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_4_5 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 4.5 goals", gameList: awayOBJAway_list.over_4_5, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_5_5 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 5.5 goals", gameList: awayOBJAway_list.over_5_5, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.under_1_5 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Under 1.5 goals", gameList: awayOBJAway_list.under_1_5, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.under_2_5 / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Under 2.5 goals", gameList: awayOBJAway_list.under_2_5, setList: true, teamName: props.teamName, homeAll: "H" })] });
        contentOUHTFT = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_0_5_HT / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 0.5 goals first half", gameList: awayOBJAway_list.over_0_5_HT, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_1_5_HT / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 1.5 goals first half", gameList: awayOBJAway_list.over_1_5_HT, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_2_5_HT / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 2.5 goals first half", gameList: awayOBJAway_list.over_2_5_HT, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_0_5_SH / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 0.5 goals second half", gameList: awayOBJAway_list.over_0_5_SH, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_1_5_SH / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 1.5 goals second half", gameList: awayOBJAway_list.over_1_5_SH, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.over_2_5_SH / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Over 2.5 goals second half", gameList: awayOBJAway_list.over_2_5_SH, setList: true, teamName: props.teamName, homeAll: "H" })] });
        contentHTFT = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.home_home / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Win HT - Win FT", gameList: awayOBJAway_list.home_home, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.home_draw / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Win HT - Draw FT", gameList: awayOBJAway_list.home_draw, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.home_away / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Win HT - Lose FT", gameList: awayOBJAway_list.home_away, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.draw_home / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Draw HT - Win FT", gameList: awayOBJAway_list.draw_home, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.draw_draw / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Draw HT - Draw FT", gameList: awayOBJAway_list.draw_draw, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.draw_away / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Draw HT - Lose FT", gameList: awayOBJAway_list.draw_away, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.away_home / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Lose HT - Win FT", gameList: awayOBJAway_list.away_home, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.away_draw / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Lose HT - Draw FT", gameList: awayOBJAway_list.away_draw, setList: true, teamName: props.teamName, homeAll: "H" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAway.away_away / awayOBJAway.gamesCount * 100).toFixed(0), txt: "Lose HT - Lose FT", gameList: awayOBJAway_list.away_away, setList: true, teamName: props.teamName, homeAll: "H" })] });
    }
    else if (state.all) {
        gamesCountVar = awayOBJAll.gamesCount;
        contentOverall = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.gspm / awayOBJAll.gamesCount).toFixed(2), txt: "Goals scored per game", gameList: [], setList: false, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.gcpm / awayOBJAll.gamesCount).toFixed(2), txt: "Goals conceded per game", gameList: [], setList: false, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.win / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Win", gameList: awayOBJAll_list.win, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.draw / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Draw", gameList: awayOBJAll_list.draw, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.lose / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Lose", gameList: awayOBJAll_list.lose, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.cleanS / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Clean sheets", gameList: awayOBJAll_list.cleanS, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.soem / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Team scored over 0.5 goals", gameList: awayOBJAll_list.soem, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.stgoem / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Team scored over 1.5 goals", gameList: awayOBJAll_list.stgoem, setList: true, teamName: props.teamName, homeAll: "A" })] });
        contentWinOver = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.win2 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Win and over 1.5 goals", gameList: awayOBJAll_list.win2, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.draw2 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Draw and over 1.5 goals", gameList: awayOBJAll_list.draw2, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.lose2 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Lose and over 1.5 goals", gameList: awayOBJAll_list.lose2, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.win3 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Win and over 2.5 goals", gameList: awayOBJAll_list.win3, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.draw3 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Draw and over 2.5 goals", gameList: awayOBJAll_list.draw3, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.lose3 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Lose and over 2.5 goals", gameList: awayOBJAll_list.lose3, setList: true, teamName: props.teamName, homeAll: "A" })] });
        contentBTTS = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.bts / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Both teams to score (BTTS)", gameList: awayOBJAll_list.bts, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.btsFH / awayOBJAll.gamesCount * 100).toFixed(0), txt: "BTTS in the first half", gameList: awayOBJAll_list.btsFH, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.BTTS_SH / awayOBJAll.gamesCount * 100).toFixed(0), txt: "BTTS in the second half", gameList: awayOBJAll_list.BTTS_SH, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.btts3 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "BTTS and over 2.5 goals", gameList: awayOBJAll_list.btts3, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.win_BTTS / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Team won and BTTS", gameList: awayOBJAll_list.win_BTTS, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.draw_BTTS / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Draw and BTTS", gameList: awayOBJAll_list.draw_BTTS, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.lose_BTTS / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Team lost and BTTS", gameList: awayOBJAll_list.lose_BTTS, setList: true, teamName: props.teamName, homeAll: "A" })] });
        contentHT = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.leadHT / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Team won first half", gameList: awayOBJAll_list.leadHT, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.loseHT / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Team lost first half", gameList: awayOBJAll_list.loseHT, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.drawHT / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Draw at half-time", gameList: awayOBJAll_list.drawHT, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.sinFH / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Team Scored over 0.5 in FH", gameList: awayOBJAll_list.sinFH, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.sinSH / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Team Scored over 0.5 in SH", gameList: awayOBJAll_list.sinSH, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.sibh / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Team Scored in both halves", gameList: awayOBJAll_list.sibh, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.gibh / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Goal in both halves", gameList: awayOBJAll_list.gibh, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.more_FH / awayOBJAll.gamesCount * 100).toFixed(0), txt: "More goals in the first half", gameList: awayOBJAll_list.more_FH, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.more_SH / awayOBJAll.gamesCount * 100).toFixed(0), txt: "More goals in the second half", gameList: awayOBJAll_list.more_SH, setList: true, teamName: props.teamName, homeAll: "A" })] });
        contentOU = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_1_5 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 1.5 goals", gameList: awayOBJAll_list.over_1_5, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_2_5 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 2.5 goals", gameList: awayOBJAll_list.over_2_5, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_3_5 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 3.5 goals", gameList: awayOBJAll_list.over_3_5, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_4_5 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 4.5 goals", gameList: awayOBJAll_list.over_4_5, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_5_5 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 5.5 goals", gameList: awayOBJAll_list.over_5_5, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.under_1_5 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Under 1.5 goals", gameList: awayOBJAll_list.under_1_5, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.under_2_5 / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Under 2.5 goals", gameList: awayOBJAll_list.under_2_5, setList: true, teamName: props.teamName, homeAll: "A" })] });
        contentOUHTFT = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_0_5_HT / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 0.5 goals first half", gameList: awayOBJAll_list.over_0_5_HT, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_1_5_HT / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 1.5 goals first half", gameList: awayOBJAll_list.over_1_5_HT, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_2_5_HT / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 2.5 goals first half", gameList: awayOBJAll_list.over_2_5_HT, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_0_5_SH / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 0.5 goals second half", gameList: awayOBJAll_list.over_0_5_SH, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_1_5_SH / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 1.5 goals second half", gameList: awayOBJAll_list.over_1_5_SH, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.over_2_5_SH / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Over 2.5 goals second half", gameList: awayOBJAll_list.over_2_5_SH, setList: true, teamName: props.teamName, homeAll: "A" })] });
        contentHTFT = (0, jsx_runtime_1.jsxs)("ul", { children: [(0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.home_home / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Win HT - Win FT", gameList: awayOBJAll_list.home_home, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.home_draw / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Win HT - Draw FT", gameList: awayOBJAll_list.home_draw, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.home_away / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Win HT - Lose FT", gameList: awayOBJAll_list.home_away, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.draw_home / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Draw HT - Win FT", gameList: awayOBJAll_list.draw_home, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.draw_draw / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Draw HT - Draw FT", gameList: awayOBJAll_list.draw_draw, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.draw_away / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Draw HT - Lose FT", gameList: awayOBJAll_list.draw_away, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.away_home / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Lose HT - Win FT", gameList: awayOBJAll_list.away_home, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.away_draw / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Lose HT - Draw FT", gameList: awayOBJAll_list.away_draw, setList: true, teamName: props.teamName, homeAll: "A" }), (0, jsx_runtime_1.jsx)(StatsLine_1.default, { br: (awayOBJAll.away_away / awayOBJAll.gamesCount * 100).toFixed(0), txt: "Lose HT - Lose FT", gameList: awayOBJAll_list.away_away, setList: true, teamName: props.teamName, homeAll: "A" })] });
    }
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: SingleStats_module_css_1.default.SingleStatsContainer }, { children: [(0, jsx_runtime_1.jsx)(TittleTemplateBox_1.default, { name: "Statistics" }), (0, jsx_runtime_1.jsxs)("div", Object.assign({ id: "awayButtons", className: SingleStats_module_css_1.default.overallButtons }, { children: [(0, jsx_runtime_1.jsx)(OverallButton_1.default, { o: state.single, click: setSingle, name: "Away" }), (0, jsx_runtime_1.jsx)(OverallButton_1.default, { o: state.all, click: setAll, name: "All" })] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: SingleStats_module_css_1.default.gamesCount }, { children: ["Number of games: ", (0, jsx_runtime_1.jsxs)("span", Object.assign({ style: { fontSize: "17px", fontWeight: "600" } }, { children: [gamesCountVar, " "] })), " "] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: SingleStats_module_css_1.default.SingleStats }, { children: [(0, jsx_runtime_1.jsx)(TittleTemplateBox_1.default, { name: "Overall" }), contentOverall] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: SingleStats_module_css_1.default.SingleStats }, { children: [(0, jsx_runtime_1.jsx)(TittleTemplateBox_1.default, { name: "Win/Draw/Lose & Over Goals" }), contentWinOver] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: SingleStats_module_css_1.default.SingleStats }, { children: [(0, jsx_runtime_1.jsx)(TittleTemplateBox_1.default, { name: "Over/Under" }), contentOU] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: SingleStats_module_css_1.default.SingleStats }, { children: [(0, jsx_runtime_1.jsx)(TittleTemplateBox_1.default, { name: "Over/Under FH-SH" }), contentOUHTFT] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: SingleStats_module_css_1.default.SingleStats }, { children: [(0, jsx_runtime_1.jsx)(TittleTemplateBox_1.default, { name: "First Half (FH) / Second Half (SH)" }), contentHT] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: SingleStats_module_css_1.default.SingleStats }, { children: [(0, jsx_runtime_1.jsx)(TittleTemplateBox_1.default, { name: "Half-Time/Full-Time" }), contentHTFT] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: SingleStats_module_css_1.default.SingleStats }, { children: [(0, jsx_runtime_1.jsx)(TittleTemplateBox_1.default, { name: "Both Teams To Score" }), contentBTTS] }))] })));
};
exports.default = SingleStats;
